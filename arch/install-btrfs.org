#+title: Arch installation guide: btrfs edition
#+author: Rafael Ito
#+description: Arch install guide: btrfs edition
#+startup: showeverything

* Table of Contents :toc:
- [[#preparation][Preparation]]
  - [[#documents][Documents]]
  - [[#boot-from-the-live-usb][Boot from the live USB]]
- [[#live-environment][Live environment]]
  - [[#increase-font-size][Increase font size]]
  - [[#configure-network-device][Configure network device]]
  - [[#set-up-wi-fi-connection][Set up Wi-Fi connection]]
  - [[#update-the-system-clock][Update the system clock]]
  - [[#disk-partitioning][Disk partitioning]]
  - [[#format-mount-and-create-subvolumes][Format, mount and create subvolumes]]
  - [[#mount-the-subvolumes][Mount the subvolumes]]
  - [[#install-the-system][Install the system]]
  - [[#chroot-into-the-system][Chroot into the system]]
  - [[#localization][Localization]]
  - [[#network-configuration][Network configuration]]
  - [[#password-and-update][Password and update]]
  - [[#boot-loader-grub][Boot loader (GRUB)]]
  - [[#reboot][Reboot]]

* Preparation
** Documents
- Arch install:
  - https://wiki.archlinux.org/index.php/Installation_guide
  - https://itsfoss.com/install-arch-linux/
- Btrfs:
  - https://wiki.archlinux.org/title/btrfs
  - https://archive.kernel.org/oldwiki/btrfs.wiki.kernel.org/index.php/SysadminGuide.html#Subvolumes (obsolete!)
  - https://btrfs.readthedocs.io/en/latest/index.html
** Boot from the live USB
download image from:
https://www.archlinux.org/download/

verify signature: (replace <VERSION> accordingly)
#+begin_src sh
gpg --keyserver-options auto-key-retrieve --verify archlinux-<VERSION>-x86_64.iso.sig
#+end_src

copy image to a USB stick: (replace "sdx" accordingly)
#+begin_src sh
dd bs=4M if=path/to/archlinux.iso of=/dev/sdx status=progress oflag=sync
#+end_src

Boot from the USB flash drive.
* Live environment
** Increase font size
#+begin_src sh
setfont /usr/share/kbd/consolefonts/latarcyrheb-sun32.psfu.gz
#+end_src
** Configure network device
#+begin_src sh
iw dev
rfkill list
rfkill unblock wifi
ip link set wlp1s0 up
iw dev wlp1s0 scan | less
ip link set wlp1s0 down
iw dev wlp1s0 set type ibss
ip link set wlp1s0 up
#+end_src
** Set up Wi-Fi connection
replace "SSID" and "PASSWD" accordingly
#+begin_src sh
wpa_passphrase "SSID" "PASSWD" > /etc/wpa_supplicant/SSID.conf
wpa_supplicant -c /etc/wpa_supplicant/SSID.conf -i wlp1s0
wpa_supplicant -B -c /etc/wpa_supplicant/SSID.conf -i wlp1s0
dhclient wlp1s0
#+end_src
** Update the system clock
#+begin_src sh
timedatectl set-ntp true
#+end_src
** Disk partitioning
If there is an EFI partition already, go ahead and use it instead of creating a new one!

#+begin_src sh
fdisk -l
fdisk /dev/nvme0n1
#+end_src
*** delete partitions
|---------+--------------------|
|   <c>   |        <c>         |
| command |    description     |
|---------+--------------------|
|    d    | delete a partition |
| <ENTER> |  partition number  |
|---------+--------------------|
Repeat if necessary.
*** create EFI partition
Not needed if an EFI partition already exists.
|---------+-------------------------|
|   <c>   |           <c>           |
| command |       description       |
|---------+-------------------------|
|    n    |   add a new partition   |
|    p    |     partition type      |
|    2    |    partition number     |
| <ENTER> |      first sector       |
|  +1GiB  |       last sector       |
|    Y    |  remove the signature   |
|---------+-------------------------|
|    t    | change a partition type |
|    2    |    partition number     |
|    1    |       EFI System        |
|---------+-------------------------|
Update 2021/05: EFI partition type "ef"
*** create btrfs top-level partition
|---------+-------------------------|
|   <c>   |           <c>           |
| command |       description       |
|---------+-------------------------|
|    n    |   add a new partition   |
|    p    |     partition type      |
|    3    |    partition number     |
| <ENTER> |      first sector       |
| <ENTER> |       last sector       |
|    Y    |  remove the signature   |
|---------+-------------------------|
|    t    | change a partition type |
|    3    |    partition number     |
|   23    |   Linux root (x86-64)   |
|---------+-------------------------|
Initial value: Linux root (x86-64) "24"
Update 2021/05: Linux root (x86-64) "83"
Update 2022/07: Linux root (x86-64) "23"
*** create swap partition
Update: instead of a partition, use a swap file or zram kernel mod!
*** save & exit
|---------+------------------------------|
|   <c>   |             <c>              |
| command |         description          |
|---------+------------------------------|
|    p    |  print the partition table   |
|    w    | write table to disk and exit |
|---------+------------------------------|
** Format, mount and create subvolumes
*** Format & mount partition
#+begin_src sh
mkfs.fat -F32 /dev/sda2
mkfs.btrfs /dev/nvme0n1p3
mount /dev/nvme0n1p3 /mnt
#+end_src
*** Create subvolumes
#+begin_src sh
btrfs subvolume create /mnt/@root
btrfs subvolume create /mnt/@home
btrfs subvolume create /mnt/@swap
btrfs subvolume create /mnt/@snapshot-root
btrfs subvolume create /mnt/@snapshot-home
btrfs subvolume create /mnt/@cache
btrfs subvolume create /mnt/@log
btrfs subvolume create /mnt/@pacman
btrfs subvolume create /mnt/@flatpak
btrfs subvolume create /mnt/@podman
btrfs subvolume create /mnt/@docker
btrfs subvolume create /mnt/@libvirt
#+end_src
*** Umount partition
#+begin_src sh
umount /mnt
#+end_src
** Mount the subvolumes
*** root
**** @root
Mount the @root subvolume in =/=.
#+begin_src sh
mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@root /dev/nvme0n1p3 /mnt
#+end_src
**** @snapshot-root
Mount the @snapshot-root subvolume in =/.snapshot=.
#+begin_src sh
mkdir /mnt/.snapshot
mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@snapshot-root /dev/nvme0n1p3 /mnt/.snapshot
#+end_src
*** home
**** @home
Create home dir and mount @home subvolume in /home
#+begin_src sh
mkdir /mnt/home
mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@home /dev/nvme0n1p3 /mnt/home
#+end_src
**** @snapshot-home
Mount the @snapshot-home subvolume in =/home/.snapshot=.
#+begin_src sh
mkdir /mnt/home/.snapshot
mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@snapshot-home /dev/nvme0n1p3 /mnt/home/.snapshot
#+end_src
**** @cache
Exclude =~/.cache= dir from snapshots.
#+begin_src sh
mkdir -p /mnt/home/rafael/.cache
mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@cache /dev/nvme0n1p3 /mnt/home/rafael/.cache
#+end_src
*** var
**** @log
Roll back snapshots while keeping the logs untouched for debug.
#+begin_src sh
mkdir -p /mnt/var/log
mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@log /dev/nvme0n1p3 /mnt/var/log
#+end_src
**** @pacman
Exclude pacman cache from snapshots.
#+begin_src sh
mkdir -p /mnt/var/cache/pacman/pkg
mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@pacman /dev/nvme0n1p3 /mnt/var/cache/pacman/pkg
#+end_src
**** @flatpak
Exclude flatpaks from snapshots.
#+begin_src sh
mkdir -p /mnt/var/lib/flatpak
mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@flatpak /dev/nvme0n1p3 /mnt/var/lib/flatpak
#+end_src
**** @podman
Exclude containers (Podman) from snapshots.
#+begin_src sh
mkdir -p /mnt/var/lib/containers
mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@podman /dev/nvme0n1p3 /mnt/var/lib/containers
#+end_src
**** @docker
Exclude containers (Docker) from snapshots.
--> Note that this directory is mounted with CoW disabled! (to avoid [[https://wiki.debian.org/Btrfs][CoW on CoW]])
#+begin_src sh
mkdir -p /mnt/var/lib/docker
mount -o nodatacow,noatime,commit=120,subvol=@docker /dev/nvme0n1p3 /mnt/var/lib/docker
#+end_src
**** @libvirt
Exclude virtual machines (libvirt) from snapshots.
--> Note that this directory is mounted with CoW disabled! (to avoid [[https://wiki.debian.org/Btrfs][CoW on CoW]])
#+begin_src sh
mkdir -p /mnt/var/lib/libvirt/images
mount -o nodatacow,noatime,commit=120,subvol=@libvirt /dev/nvme0n1p3 /mnt/var/lib/libvirt/images
#+end_src
*** swap
Create dir and mount the swap subvolume.
#+begin_src sh
mkdir /mnt/swap
mount -o noatime,commit=120,subvol=@swap /dev/nvme0n1p3 /mnt/swap
#+end_src

Create and activate the the swap file.
#+begin_src sh
btrfs filesystem mkswapfile --size 16g --uuid clear /mnt/swap/swapfile
swapon /mnt/swap/swapfile
#+end_src

Remember to add the swap entry after generating the =fstab= file (update 2024/03: this is done automatically when =genfstab= is run --> see below).
#+begin_src sh
echo "/swap/swapfile none swap defaults 0 0" >> /etc/fstab
#+end_src
*** EFI
Instead of mounting the ESP directly to /boot, mount it to /efi and use bind mounts to have dedicated directories for installations (eg: "arch" under /efi/EFI/arch).
#+begin_src sh
mkdir -p /mnt/{efi,boot}
mount /dev/nvme0n1p1 /mnt/efi
mkdir -p /mnt/efi/EFI/arch
mount --bind /mnt/efi/EFI/arch /mnt/boot
#+end_src
*** Final check
Check the mountpoints with lsblk and/or findmnt.
#+begin_src sh
lsblk
findmnt
#+end_src
** Install the system
Edit mirror order automatically.
#+begin_src sh
reflector --country Brazil --age 6 --sort rate --save /etc/pacman.d/mirrorlist
#+end_src

Microcode:
  - for Intel CPUs, use =intel-ucode= package
  - for AMD CPUs, use =amd-ucode= package
#+begin_src sh
pacstrap /mnt base base-devel linux linux-firmware bash intel-ucode btrfs-progs networkmanager neovim
#+end_src

Generate fstab.
#+begin_src sh
genfstab -U /mnt >> /mnt/etc/fstab
#+end_src

Edit fstab to update /efi/EFI/arch mount.
Update 03/2024: not needed anymore.
#+begin_src sh
sed -i -e "s/\/mnt//" /mnt/etc/fstab
#+end_src
** Chroot into the system
Change root into the new system.
#+begin_src sh
arch-chroot /mnt
#+end_src

Set time zone.
#+begin_src sh
ln -sf /usr/share/zoneinfo/Brazil/East /etc/localtime
#+end_src

Set the hardware clock.
#+begin_src sh
hwclock --systohc
#+end_src
** Localization
Edit locale file.
#+begin_src sh
vi /etc/locale.gen
#+end_src

Uncomment the following locales.
#+begin_src comment
en_US.UTF-8 UTF-8
pt_br_US.UTF-8 UTF-8
#+end_src

Generate locales.
#+begin_src sh
locale-gen
#+end_src

Create the locale.conf file and set the LANG variable accordingly.
#+begin_src sh
echo LANG=en_US.UTF-8 >> /etc/locale.conf
#+end_src
** Network configuration
Create the hostname file and set hostname.
#+begin_src sh
echo IPF-ArchLinux >> /etc/hostname
#+end_src

Add matching entries to hosts.
#+begin_src sh
nvim /etc/hosts
#+end_src
#+begin_src comment
127.0.0.1  localhost
::1        localhost
127.0.1.1  IPF-ArchLinux.localdomain  IPF-ArchLinux
#+end_src

Install wireless packages.
#+begin_src sh
pacman -S iw wpa_supplicant networkmanager
#+end_src
** Password and update
set root password and update the system
#+begin_src sh
passwd
pacman -Syu
#+end_src
** Boot loader (GRUB)
Install packages.
#+begin_src sh
pacman -S grub grub-btrfs efibootmgr
#+end_src

Add btrfs module.
#+begin_src sh
nvim /etc/mkinitcpio.conf
#+end_src

#+begin_src comment
#MODULES=()
MODULES=(btrfs)
#+end_src

Recreate image.
#+begin_src sh
mkinitcpio -p linux
#+end_src

Install GRUB & generate the new config file.
#+begin_src sh
grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB
grub-mkconfig -o /efi/EFI/arch/grub/grub.cfg
#+end_src
** Reboot
Exit chroot environment, unmount partitions and reboot
#+begin_src sh
exit
swapoff /mnt/swap/swapfile
umount -R /mnt
reboot
#+end_src
** !!! remove USB stick !!! :noexport:

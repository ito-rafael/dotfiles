#+title: Arch installation guide: btrfs edition
#+author: Rafael Ito
#+description: Arch install guide: btrfs edition
#+startup: showeverything

* Preparation
** Documents
- Arch install:
  - https://wiki.archlinux.org/index.php/Installation_guide
  - https://itsfoss.com/install-arch-linux/
- Btrfs:
  - https://wiki.archlinux.org/title/btrfs
  - https://archive.kernel.org/oldwiki/btrfs.wiki.kernel.org/index.php/SysadminGuide.html#Subvolumes (obsolete!)
  - https://btrfs.readthedocs.io/en/latest/index.html
** Boot from the live USB
download image from:
https://www.archlinux.org/download/

verify signature: (replace <VERSION> accordingly)
#+begin_src sh
gpg --keyserver-options auto-key-retrieve --verify archlinux-<VERSION>-x86_64.iso.sig
#+end_src

copy image to a USB stick: (replace "sdx" accordingly)
#+begin_src sh
dd bs=4M if=path/to/archlinux.iso of=/dev/sdx status=progress oflag=sync
#+end_src

Boot from the USB flash drive.
* Live environment
** Increase font size
#+begin_src sh
setfont /usr/share/kbd/consolefonts/latarcyrheb-sun32.psfu.gz
#+end_src
** Configure network device
#+begin_src sh
iw dev
rfkill list
rfkill unblock wifi
ip link set wlp1s0 up
iw dev wlp1s0 scan | less
ip link set wlp1s0 down
iw dev wlp1s0 set type ibss
ip link set wlp1s0 up
#+end_src
** Set up Wi-Fi connection
replace "SSID" and "PASSWD" accordingly
#+begin_src sh
wpa_passphrase "SSID" "PASSWD" > /etc/wpa_supplicant/SSID.conf
wpa_supplicant -c /etc/wpa_supplicant/SSID.conf -i wlp1s0
wpa_supplicant -B -c /etc/wpa_supplicant/SSID.conf -i wlp1s0
dhclient wlp1s0
#+end_src
** Update the system clock
#+begin_src sh
timedatectl set-ntp true
#+end_src
** Disk partitioning
If there is an EFI partition already, go ahead and use it instead of creating a new one!

#+begin_src sh
fdisk -l
fdisk /dev/nvme0n1
#+end_src
*** delete partitions
|---------+--------------------|
|   <c>   |        <c>         |
| command |    description     |
|---------+--------------------|
|    d    | delete a partition |
| <ENTER> |  partition number  |
|---------+--------------------|
Repeat if necessary.
*** create EFI partition
Not needed if an EFI partition already exists.
|---------+-------------------------|
|   <c>   |           <c>           |
| command |       description       |
|---------+-------------------------|
|    n    |   add a new partition   |
|    2    |    partition number     |
| <ENTER> |      first sector       |
|  +300M  |       last sector       |
|    Y    |  remove the signature   |
|---------+-------------------------|
|    t    | change a partition type |
|    2    |    partition number     |
|    1    |       EFI System        |
|---------+-------------------------|
Update 2021/05: EFI partition type "ef"
*** create btrfs top-level partition
|---------+-------------------------|
|   <c>   |           <c>           |
| command |       description       |
|---------+-------------------------|
|    n    |   add a new partition   |
|    3    |    partition number     |
| <ENTER> |      first sector       |
| <ENTER> |       last sector       |
|    Y    |  remove the signature   |
|---------+-------------------------|
|    t    | change a partition type |
|    3    |    partition number     |
|   23    |   Linux root (x86-64)   |
|---------+-------------------------|
Initial value: Linux root (x86-64) "24"
Update 2021/05: Linux root (x86-64) "83"
Update 2022/07: Linux root (x86-64) "23"
*** create swap partition
Update: instead of a partition, use a swap file or zram kernel mod!
*** save & exit
|---------+------------------------------|
|   <c>   |             <c>              |
| command |         description          |
|---------+------------------------------|
|    p    |  print the partition table   |
|    w    | write table to disk and exit |
|---------+------------------------------|
** Format, mount and create subvolumes
*** Format & mount partition
#+begin_src sh
mkfs.btrfs /dev/nvme0n1p3
mount /dev/nvme0n1p3 /mnt
#+end_src
*** Create subvolumes
#+begin_src sh
btrfs subvolume create /mnt/@root
btrfs subvolume create /mnt/@home
btrfs subvolume create /mnt/@swap
btrfs subvolume create /mnt/@snapshot-root
btrfs subvolume create /mnt/@snapshot-home
btrfs subvolume create /mnt/@cache
btrfs subvolume create /mnt/@log
btrfs subvolume create /mnt/@pacman
btrfs subvolume create /mnt/@flatpak
btrfs subvolume create /mnt/@podman
btrfs subvolume create /mnt/@docker
btrfs subvolume create /mnt/@libvirt
#+end_src
*** Umount partition
#+begin_src sh
umount /mnt
#+end_src
** Mount the subvolumes
*** root
**** @root
Mount the @root subvolume in =/=
#+begin_src sh
mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@root /dev/nvme0n1p3 /mnt
#+end_src
**** @snapshot-root
Mount the @snapshot-root subvolume in =/.snapshot=
#+begin_src sh
mkdir /mnt/.snapshot
mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@snapshot-root /dev/nvme0n1p3 /mnt/.snapshot
#+end_src
*** home
**** @home
Create home dir and mount @home subvolume in /home
#+begin_src sh
mkdir /mnt/home
mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@home /dev/nvme0n1p3 /mnt/home
#+end_src
**** @snapshot-home
Mount the @snapshot-home subvolume in =/home/.snapshot=.
#+begin_src sh
mkdir /mnt/home/.snapshot
mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@snapshot-home /dev/nvme0n1p3 /mnt/home/.snapshot
#+end_src
**** @cache
Exclude =~/.cache= dir from snapshots.
#+begin_src sh
mkdir -p /mnt/home/rafael/.cache
mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@cache /dev/nvme0n1p3 /mnt/home/rafael/.cache
#+end_src
*** var
**** @log
Roll back snapshots while keeping the logs untouched for debug.
#+begin_src sh
mkdir -p /mnt/var/log
mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@log /dev/nvme0n1p3 /mnt/var/log
#+end_src
**** @pacman
Exclude pacman cache from snapshots.
#+begin_src sh
mkdir -p /mnt/var/cache/pacman/pkg
mount -o noatime,commit=120,compress=zstd,space_cache=v2,subvol=@pacman /dev/nvme0n1p3 /mnt/var/cache/pacman/pkg
#+end_src

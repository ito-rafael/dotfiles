#=================================================
# OpenSSH
#=================================================

# description:
TLDR: secure remote access
ArchWiki: "OpenSSH (OpenBSD Secure Shell) is a set of computer programs providing encrypted communication sessions over a computer network using the Secure Shell (SSH) protocol."
#-------------------------------------------------
# installation
sudo pacman -S openssh
#-------------------
# some distros require installation of client and server separately. For example:
sudo apt install openssh-client
sudo apt install openssh-server

#=======================================
# Server config
#=======================================
vim /etc/sshd_config
#---------------------------------------
# change port
#Port 22
Port 2222
#---------------------------------------
# disable root login
PermitRootLogin no
#---------------------------------------
# disable password authentication (allow login with public key only)
PasswordAuthentication no
#---------------------------------------
# allow only certain users to login
AllowUsers username
#---------------------------------------
# allow only certain group of users to login
AllowGroups sshuser
#-------------------
# create group
sudo groupadd sshuser
# add members to that group
sudo usermod -aG sshusers username
#-------------------

#=======================================
# Client config
#=======================================
# generate keys
ssh-keygen
#---------------------------------------
# copy public key to the server
ssh-copy-id -i ~/.ssh/id_rsa.pub ServerIP
# this is the same as copying ~/.ssh/id_rsa.pub of client in ~/.ssh/authorized_keys
#---------------------------------------
# connection
ssh -p 22 username@ServerIP
#---------------------------------------
# alias
cd ~/.ssh
vim config
-----
Host myserver
  Hostname IP-ADDRESS
  Port 22
  User myusername
-----
# then instead of typing: "ssh myusername@IP-ADDRESS", simply type:
ssh myserver

#=======================================
# ssh-agent
#=======================================
# description: 
#   launching ssh-agent in the background allows the user to unlock its
#   key, store it on memory and avoid typing the passphrase, unless the 
#   terminal is closed.

#---------------------------------------
# terminal-valid
#---------------------------------------
# first, check if ssh-agent is already running
ps aux | grep ssh-agent
# if not, start it
eval "$(ssh-agent -s)"
#---------------------------------------
# add the private key you want to be cached to the ssh-agent
ssh-add ~/.ssh/id_rsa

#---------------------------------------
# session-valid (ask passphrase only once)
#---------------------------------------
# installation
sudo pacman -S keychain
#---------------------------------------
# start ssh-agent after login
vim ~/.zshrc (or ~/.bashrc, if this is the case)
-----
# use keychain to launch ssh-agent and ssh-add
eval $(keychain --noask --eval --quiet id_rsa)
-----
#---------------------------------------
# edit the client config file
vim ~/.ssh/config
-----
# add keys to ssh-agent automatically
AddKeysToAgent yes
-----

#=======================================
# transfering files with SCP
#=======================================
#---------------------------------------
# putting into the server
#---------------------------------------
# file
scp -P 22 LocalFile ServerIP:ServerDir
# eg: scp -P 2222 ~/testfile 192.168.0.1:/home/username/
#-------------------
# directory (and its contents)
scp -P 22 -r LocalDir ServerIP:ServerDir
# eg: scp -P 2222 -r ~/testdir 192.168.0.1:/home/username

#---------------------------------------
# getting from the server
#---------------------------------------
# file
scp -P 22 -r ServerIP:ServerDir LocalDir
# eg: scp -P 2222 192.168.0.1:/home/username/testfile ~/
#-------------------
# directory (and its contents)
scp -P 22 ServerIP:ServerFile LocalDir
# eg: scp -P 2222 -r 192.168.0.1:/home/username/testdir ~/

#=======================================
# transfering files with SFTP
#=======================================
# change server dir
cd NewServerDir
# change client dir
lcd NewClientDir
# the same applies for other commands such as ls/lls, pwd/lpwd, etc.
#---------------------------------------
# put file/dir into server
put file
put -R dir
#---------------------------------------
# get file/dir from server
get file
get -R dir

#=======================================
# SSHFS: mounting file system with ssh
#=======================================
# installation (only needed in client side)
sudo pacman -S sshfs
sudo apt install sshfs
#---------------------------------------
# usage
sshfs username@IP:ServerMountPoint LocalMountPoint
# eg: sshfs username@192.168.0.1:/home/username/serverdir /home/username/localdir
#---------------------------------------
# flags
#   - choose port: "-p PORT"
#   - enable compression: "-C" | "-o compression=yes"
#   - translate local user UID to remote user UID: "-o idmap=user"
#   - translate UID: "-o uidfile=<PATH-TO-FILE>"
#   - translate GID: "-o gidfile=<PATH-TO-FILE>
#   - to follow symlinks: "-o follow_symlinks"
#   - modify in real time - disable caching (decrease performance): "-o dir_cache=no"
# eg: sshfs username@192.168.0.1:/home/username/serverdif ~/localdir -C -p 2222 -o dir_cache=no -o follow_symlinks -o idmap=user
#---------------------------------------
# umount
fusermount -u LocalMountPoint
# eg: fusermount -u /home/username/localdir

#=======================================

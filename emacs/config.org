#+title: EFS config
#+author: Rafael Ito
#+description: Emacs from Scratch (EFS) personal config
#+startup: showeverything
#+options: toc:2
#+property: header-args:emacs-lisp :tangle ./init.el
#+auto_tangle: t

* Table of Contents :toc_2:
- [[#ui][UI]]
- [[#miscellaneous][Miscellaneous]]
- [[#package-manager][Package Manager]]
- [[#theme][Theme]]
  - [[#doom-themes][doom-themes]]
- [[#modeline][Modeline]]
  - [[#all-the-icons][all-the-icons]]
  - [[#doom-modeline][doom-modeline]]
- [[#org][Org]]
  - [[#org-bullets][org-bullets]]
- [[#evil][Evil]]
  - [[#evil-1][evil]]
  - [[#evil-collections][evil-collections]]
  - [[#emacs-evil-colemak-basics][emacs-evil-colemak-basics]]
- [[#general][General]]
- [[#ivy][Ivy]]
  - [[#ivy-1][Ivy]]
  - [[#ivy-rich][Ivy-rich]]
  - [[#counsel][Counsel]]
  - [[#prescient][prescient]]
- [[#rainbow-delimiters][rainbow-delimiters]]
- [[#helpful][helpful]]
- [[#which-key][which-key]]
- [[#hydra][Hydra]]
  - [[#installation][Installation]]
  - [[#adjust-font-size][Adjust font size]]
  - [[#eos][EoS]]
- [[#projectile][Projectile]]
  - [[#counsel-1][Counsel]]
- [[#magit][Magit]]
  - [[#transient][Transient]]
  - [[#magit-1][Magit]]
  - [[#forge][Forge]]
- [[#dashboard][Dashboard]]

* UI :noexport_1:
** Misc
#+begin_src emacs-lisp
(setq inhibit-startup-message t)                  ;; disable startup massage
(setq visible-bell t)                             ;; disable beep and set visible bell
#+end_src
** Bars
#+begin_src emacs-lisp
(menu-bar-mode -1)                                ;; disable menu bar
(tool-bar-mode -1)                                ;; disable toolbar
(scroll-bar-mode -1)                              ;; disable scrollbar
#+end_src
** Line number
#+begin_src emacs-lisp
(global-display-line-numbers-mode t)              ;; enable line number
(setq display-line-numbers-type 'relative)        ;; set line number to relative
(column-number-mode)                              ;; enable column number
#+end_src
** Transparency
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 97))
** Fonts
*** Installation
#+begin_src sh
sudo pacman -S ttf-jetbrains-mono ttf-ubuntu-font-family
#+end_src
*** Default
#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
#+end_src
*** Variable pitch
#+begin_src emacs-lisp
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu"
  :height 120
  :weight 'medium)
#+end_src
*** Fixed pitch
#+begin_src emacs-lisp
(set-face-attribute 'fixed-pitch nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
#+end_src
#+end_src
** Zoom in/out
*** Keyboard
#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src
*** Mouse
#+begin_src emacs-lisp
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
* Miscellaneous :noexport_1:
** F16
Set F16 as M-x.
#+begin_src emacs-lisp
(global-set-key (kbd "<f16>") 'execute-extended-command)
#+end_src
** ESC
Make ESC quit prompts.
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
* Package Manager :noexport_1:
Git repo: [[https://github.com/progfolio/elpaca][Elpaca]]
#+ATTR_ORG: :width 75
[[./icon/elpaca.svg]]
** Installation
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                 ,@(when-let ((depth (plist-get order :depth)))
                                                     (list (format "--depth=%d" depth) "--no-single-branch"))
                                                 ,(plist-get order :repo) ,repo))))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src
** use-package integration
#+begin_src emacs-lisp
(elpaca elpaca-use-package
  ;; Enable Elpaca support for use-package's :ensure keyword.
  (elpaca-use-package-mode))
#+end_src
** Setup
#+begin_src emacs-lisp
(setq use-package-always-ensure t)                ;; set ":ensure t" for every package
#+end_src
* Theme
** doom-themes
https://github.com/doomemacs/themes
#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-one t))
#+end_src
* Modeline
** all-the-icons
https://github.com/domtronn/all-the-icons.el
Install icon fonts.
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
** doom-modeline
https://github.com/seagle0128/doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)                    ;; enable modeline
  :custom ((doom-modeline-height 15)))            ;; adjust modeline height
#+end_src
* Dired
** Dired
#+begin_src emacs-lisp
(use-package dired
  :ensure nil  ;; do not install (Dired is already built-in)
  :custom
  (dired-listing-switches "-agho --group-directories-first")  ;; list directories first
  (dired-kill-when-opening-new-dired-buffer t))
#+end_src
** all-the-icons-dired
https://github.com/jtbm37/all-the-icons-dired
#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t)))
  :config
  (setq all-the-icons-dired-monochrome nil))
#+end_src
* Org
#+begin_src emacs-lisp
(use-package org
  :config
  (setq org-ellipsis " ▾")  ;; set icon when section is folded (outline-hide-body)
)
#+end_src
** org-bullets
Bullets as UTF-8 characters for headers in Org Mode.
https://github.com/sabof/org-bullets
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
* Evil
** evil
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)   ;; enable evil-integration
  (setq evil-want-keybinding nil)  ;; disable evil-keybindings (use )
  (setq evil-want-C-u-scroll t)    ;; disable =universal-argument= to use C-u to scroll up
  (setq evil-want-C-i-jump nil)    ;; disable C-i to jump forward in the list
  :config
  (evil-mode 1)
)
** evil-collections
https://github.com/emacs-evil/evil-collection
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  ;; Colemak-DH layout remap
  ;; source: https://github.com/emacs-evil/evil-collection/pull/724
  (defvar evil-colemak-dh-translations
    '("n" "h"  "N" "H"
      "e" "j"  "E" "J"
      "i" "k"  "I" "K"
      "o" "l"  "O" "L"
      "h" "o"  "H" "O"
      "s" "i"  "S" "I"
      "l" "e"  "L" "E"
      "k" "n"  "K" "N"

      "gn" "gh"  "gN" "gH"
      "ge" "gj"  "gE" "gJ"
      "gi" "gk"  "gI" "gK"
      "go" "gl"  "gO" "gL"
      "gh" "go"  "gH" "gO"
      "gs" "gi"  "gS" "gI"
      "gl" "ge"  "gL" "gE"
      "gk" "gn"  "gK" "gN")
  "Evil keys to translate for the Colemak-DH keyboard layout.")

  ;; translate the main evil-mode bindings.
  (apply #'evil-collection-translate-key
         nil
         '(evil-normal-state-map
           evil-motion-state-map
           evil-operator-state-map
           evil-visual-state-map
           evil-window-map)
         evil-colemak-dh-translations)

  ;; install a hook to translate bindings from evil-collection.
  (defun evil-colemak-dh-translate-keys (mode keymaps &optional states &rest _rest)
    "Translate bindings for MODE in KEYMAPS for the Colemak-DH layout in STATES."
    (apply #'evil-collection-translate-key
           (or states '(normal motion visual))
           keymaps
           evil-colemak-dh-translations))
  (add-hook 'evil-collection-setup-hook #'evil-colemak-dh-translate-keys)

  ;; enable evil-collection bindings in all modes
  (evil-collection-init))
#+end_src
** evil-colemak
Original repo: https://github.com/wbolster/emacs-evil-colemak-basics
Forked repo: https://github.com/ito-rafael/evil-colemak
#+begin_src emacs-lisp :tangle no
(use-package evil-colemak
  :ensure (evil-colemak.el :host github :repo "ito-rafael/evil-colemak")
  :after evil-collection
  :config
  (global-evil-colemak-mode))
#+end_src
* General :noexport_1:
Keybindings
https://github.com/noctuid/general.el
** Leader key
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)

  ;; set 'SPC' as the global leader key
  (general-create-definer efs/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"             ;; set leader
    :global-prefix "M-SPC")   ;; access leader in insert mode
#+end_src
** b --> buffer
#+begin_src emacs-lisp
  (efs/leader-keys
    "b"   '(:ignore t :wk "buffer")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b n" '(next-buffer      :wk "Next buffer")
    "b p" '(previous-buffer  :wk "Previous buffer")
    "b r" '(revert-buffer    :wk "Reload buffer")
  )
#+end_src
** f --> files
#+begin_src emacs-lisp
  (efs/leader-keys
    "f"  '(:ignore t :wk "Files")
    "f r" '(counsel-recentf :wk "Find recent files")
** h --> help
#+begin_src emacs-lisp
  (efs/leader-keys
    "h" '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h k" '(describe-key      :wk "Describe key")
    "h v" '(describe-variable :wk "Describe variable")
  )
#+end_src
  )
#+end_src
** EoS
#+begin_src emacs-lisp
)
#+end_src
* Ivy
Alternatives:
  - [[https://github.com/emacs-helm/helm][Helm]]
** Ivy
Generic completion mechanism for Emacs.
https://github.com/abo-abo/swiper
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
     :map ivy-minibuffer-map
     ("C-e" . ivy-next-line)      ;; arrow down
     ("C-i" . ivy-previous-line)  ;; arrow up
     ("C-o" . ivy-alt-done)       ;; confirm
     ("TAB" . ivy-alt-done))      ;; confirm
  :config
  (ivy-mode 1))
#+end_src
** Ivy-rich
Descriptions M-x commands.
*** ivy-rich
https://github.com/Yevgnen/ivy-rich
#+begin_src emacs-lisp
(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))
#+end_src
** Counsel
Collection of Ivy-enhanced versions of common Emacs commands.
#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :diminish
  :config
  (counsel-mode 1)
#+end_src
** prescient
Sorting and filtering extension for Ivy.
https://github.com/radian-software/prescient.el
#+begin_src emacs-lisp
(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  (setq prescient-sort-length-enable nil)  ;; disable sorting by shortest-first
  (prescient-persist-mode 1)  ;; keep sorting remembered across sessions
  (ivy-prescient-mode 1))
#+end_src
* rainbow-delimiters
https://github.com/Fanael/rainbow-delimiters
Add rainbow coloring to parentheses in every programming language mode.
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
* helpful
Helpful is an alternative to the built-in Emacs help that provides much more contextual information.
https://github.com/Wilfred/helpful
#+begin_src emacs-lisp
(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)  ;; replace describe-function function with helpful variant
  (counsel-describe-variable-function #'helpful-variable)  ;; replace describe-variable function with helpful variant
  :bind
  ([remap describe-function] . counsel-describe-function)  ;; remap keybinding of describe-function to counsel-describe-function
  ([remap describe-command]  . helpful-command)            ;; remap keybinding of describe-command to helpful-command
  ([remap describe-variable] . counsel-describe-variable)  ;; remap keybinding of describe-variable to counsel-describe-variable
  ([remap describe-key]      . helpful-key)                ;; remap keybinding of describe-key to helpful-key
)
#+end_src
* which-key
https://github.com/justbur/emacs-which-key
#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode 1)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.25
        which-key-separator " → "
)
#+end_src
* Hydra
https://github.com/abo-abo/hydra
** Installation
#+begin_src emacs-lisp
(use-package hydra
  :defer t
  :config
#+end_src
** Adjust font size
Define transient keybindings for changing the font size.
#+begin_src emacs-lisp
  (defhydra hydra-text-scale (:timeout 3)
    "Zoom text"
    ("i" text-scale-increase "out")
    ("e" text-scale-decrease "in"))

  (efs/leader-keys
    "t s" '(hydra-text-scale/body :which-key "scale text"))
#+end_src
** EoS
#+begin_src emacs-lisp
)
#+end_src
* Projectile
https://github.com/bbatsov/projectile
#+begin_src emacs-lisp
(use-package projectile
  :config (projectile-mode)
  :init
  ;; set directory that holds the Git repos
  (when (file-directory-p "~/git")
    (setq projectile-project-search-path '("~/git")))
  (setq projectile-switch-project-action #'projectile-dired))  ;; open dired when switching projects
#+end_src
** Counsel
Integration with Ivy/Counsel.
#+begin_src emacs-lisp
(use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode))
#+end_src
* Magit
** Transient
Transient is the library used to implement the keyboard-driven “menus” in Magit.
https://github.com/magit/transient
#+begin_src emacs-lisp
(use-package transient)
#+end_src
** Magit
https://github.com/magit/magit
It's Magit! A Git Porcelain inside Emacs.
#+begin_src emacs-lisp
(use-package magit
  :after transient)
** Forge
Pulls down all information from repositories: issues, pull requests, notifications, etc.
https://magit.vc/manual/ghub/Getting-Started.html
*** Prerequisites
**** Setting the Username
https://magit.vc/manual/ghub/Setting-the-Username.html
***** GitHub
#+begin_src sh
git config --global github.user USERNAME
#+end_src
***** GitLab
#+begin_src sh
git config --global gitlab.user USERNAME
#+end_src
***** GitHub Enterprise
#+begin_src sh
cd /path/to/repo
git config --local github.host example.com/api/v3
#+end_src
**** Creating a Token
https://magit.vc/manual/forge/Token-Creation.html
https://magit.vc/manual/ghub/Creating-a-Token.html
***** GitHub
https://github.com/settings/tokens
Forge requires the following token scopes:
- =repo= grants full read/write access to private and public repositories.
- =user= grants access to profile information.
- =read:org= grants read-only access to organization membership.
***** GitLab
https://gitlab.com/-/profile/personal_access_tokens
For Gitlab instances =api= is the only required scope. It gives read and write access to everything.
**** Storing a Token
https://magit.vc/manual/ghub/Storing-a-Token.html
***** Create file
=M-x= --> =find-file= --> select the file =~/.config/authinfo= --> then paste the following:
****** GitHub
#+begin_src conf
machine api.github.com login ito-rafael^forge password <PERSONAL-ACCESS-TOKEN>
#+end_src
****** GitLab
#+begin_src conf
machine gitlab.com/api/v4 login ito-rafael^forge password <PERSONAL-ACCESS-TOKEN>
#+end_src
***** Encrypt file
- =M-x= --> =epa-encrypt-file= --> select the file =~/.config/authinfo= --> mark your personal keys with =epa-mark-key= --> hit =Enter= while the cursor is over the =[OK].=
- A new file =~/.config/authinfo.gpg= should have been created. Try opening it, while checking for a "Decrypting" message in the minibuffer.
***** Delete unencrypted file
=M-x= --> =find-file= --> select =~/.config/authinfo= --> press =M-o= --> =delete=
*** Installation & configuration
#+begin_src emacs-lisp
(use-package forge
  :after magit
  :config
  ;; define path for the authinfo file (XDG_CONFIG_HOME or HOME, whichever it finds first)
  (setq auth-sources (list
                     (concat (getenv "XDG_CONFIG_HOME") "/authinfo.gpg")
                     "~/.authinfo.gpg")))
#+end_src
* Dashboard
https://github.com/emacs-dashboard/emacs-dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :init
  (setq initial-buffer-choice 'dashboard-open) ;; show Dashboard with emacsclient
  (setq dashboard-startup-banner 'logo)  ;; use modern emacs logo as banner
  :config
  (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
  (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
  (dashboard-setup-startup-hook))
#+end_src
#+end_src

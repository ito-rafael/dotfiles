#+TITLE: EFS config
#+AUTHOR: Rafael Ito
#+DESCRIPTION: Emacs from Scratch (EFS) personal config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc_2:
- [[#ui][UI]]
- [[#miscellaneous][Miscellaneous]]
- [[#package-manager][Package Manager]]

* UI :noexport_1:
** Misc
#+begin_src emacs-lisp
(setq inhibit-startup-message t)                  ;; disable startup massage
(setq visible-bell t)                             ;; disable beep and set visible bell
#+end_src
** Bars
#+begin_src emacs-lisp
(menu-bar-mode -1)                                ;; disable menu bar
(tool-bar-mode -1)                                ;; disable toolbar
(scroll-bar-mode -1)                              ;; disable scrollbar
#+end_src
** Line number
#+begin_src emacs-lisp
(global-display-line-numbers-mode t)              ;; enable line number
(column-number-mode)                              ;; enable column number
#+end_src
* Miscellaneous :noexport_1:
** ESC
Make ESC quit prompts.
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
* Package Manager :noexport_1:
Git repo: [[https://github.com/progfolio/elpaca][Elpaca]]
#+ATTR_ORG: :width 75
[[./icon/elpaca.svg]]
** Installation
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                 ,@(when-let ((depth (plist-get order :depth)))
                                                     (list (format "--depth=%d" depth) "--no-single-branch"))
                                                 ,(plist-get order :repo) ,repo))))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src
** use-package integration
#+begin_src emacs-lisp
(elpaca elpaca-use-package
  ;; Enable Elpaca support for use-package's :ensure keyword.
  (elpaca-use-package-mode))
#+end_src
** Setup
#+begin_src emacs-lisp
(setq use-package-always-ensure t)                ;; set ":ensure t" for every package
#+end_src
* Theme
** doom-themes
https://github.com/doomemacs/themes
#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-one t))
#+end_src
* Modeline
** all-the-icons
https://github.com/domtronn/all-the-icons.el
Install icon fonts.
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
** doom-modeline
https://github.com/seagle0128/doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)                    ;; enable modeline
  :custom ((doom-modeline-height 15)))            ;; adjust modeline height
#+end_src
* Org
#+begin_src emacs-lisp
(use-package org
  :config
  (setq org-ellipsis " â–¾")  ;; set icon when section is folded (outline-hide-body)
)
#+end_src
* Evil
** evil
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)   ;; enable evil-integration
  (setq evil-want-keybinding nil)  ;; disable evil-keybindings (use )
  (setq evil-want-C-u-scroll t)    ;; disable =universal-argument= to use C-u to scroll up
  (setq evil-want-C-i-jump nil)    ;; disable C-i to jump forward in the list
  :config
  (evil-mode 1)
)
#+end_src
